G M

- System set up

To execute our benchmarking procedure in the single-node mode of Timescale (an extension of Postgres) and Influx database systems, we intend to establish a virtual machine on the Okeanos Infrastructure as a Service (IaaS) cloud provider.

- Virtual Machine creation


As a virtual machine, we have instantiated an Ubuntu 22.04.03 LTS instance, utilizing the 5.15.0-91-generic Linux kernel. The virtual environment is configured with an Intel(R) Xeon(R) CPU E5-2650 v3 operating at 2.3GHz, 4GB of RAM, and a 30GB virtual boot drive. The virtual machine is automatically assigned a public IPv6 address, and a domain is provided to facilitate seamless SSH access. Furthermore, a public IPv4 address (83.212.73.15) has been specifically assigned to enable compatibility with services requiring IPv4 connectivity, such as GitHub, which lacks native support for IPv4 and necessitates the implementation of a NAT64 system, which would require extra resources to set up and deploy.

- Installation


{
- Influx

source: https://docs.influxdata.com/influxdb/v1/introduction/install/#installing-influxdb-oss

To commence, we will install Influx version 1.8.10. This entails adding Influx's repository to the apt sources list and proceeding with the installation through the apt package manager. Following the installation, we will initiate the influxdb service to ensure that the Database Management System (DBMS) operates in the background on our benchmarking machine.
}

{
- PostgresSQL

source: https://docs.timescale.com/self-hosted/latest/install/installation-linux/
The second timeseries database, Timescale, operates as an extension built upon PostgresSQL. To facilitate the installation of Timescale, it is imperative to first install Postgres. We will utilize version 14.10 of Postgres for this purpose. As a preliminary step, we need to install specific third-party packages. Following this, we can execute a provided shell script by Postgres to seamlessly handle the installation process.
}

{
- Timescale

source:

Upon the successful installation of Postgres on our virtual machine, the subsequent step involves the installation and activation of Timescale. For compatibility reasons, we have opted to use version 2.13.0, as it was the latest version available at the time of installation. In a manner similar to the procedure employed for Influx, the inclusion of Timescale's repository in the apt sources list is required, followed by the initiation of the installation process through the apt package manager.

Upon completion of the installation, we are required to execute a tuning script provided by Timescale. Finally, we utilize Postgres's Command Line Interface (CLI) environment to register the Timescale extension with the Database Management System (DBMS).
}

{
- TSBS

source :


The benchmarking system designated for our analysis is referred to as TSBS (Timeseries Database Benchmarking System) and is under the maintenance of Timescale. While TSBS is capable of benchmarking numerous timeseries databases, our focus will be on evaluating two specific databases, namely Timescale and Influx. Developed in the Go programming language, TSBS necessitates compilation on our local machine. Therefore, our initial step involves the installation of the Go, a process facilitated through the apt package manager. For the present analysis, we are installing the latest version available, which, at the time of writing, is version 1.18.1.

Following the successful installation of Go, we proceed to clone the official TSBS GitHub repository REF(https://github.com/timescale/tsbs) and compile it on our system. This involves utilizing Go's built-in installation system to acquire the TSBS repository and subsequently employing the make utility for compilation. Once TSBS is successfully built, it becomes imperative to inform the shell about the paths of TSBS's binary executables. To achieve this, we export the directory containing TSBS's binaries to the PATH environment variable. The scripts housed in this directory will be utilized throughout various stages of this analysis, including data generation, query generation, data insertion, and query execution.
}

{
- Clone git repository

Lastly we have to clone the GitHub repository REF(https://github.com/EEMplekei/TimeseriesDB_Benchmarks) of this paper. To be able to do that we have to create a SSH key-pair using the linux built-in utilities and add it to the keys of our private repository. Having done that we can simple clone the repository through SSH. All of the required scripts REF(https://github.com/EEMplekei/TimeseriesDB_Benchmarks/tree/main/single_node/scripts) to benchmark the two, now set up, systems are there.
}


Notes:

Additionally, there exist scripts designed to facilitate the visualization of the generated benchmark data. However, it is essential to note that these scripts are intended for execution on a system equipped with a Graphical User Interface (GUI). This is particularly important as the utilization of the matplotlib, a widely adopted Python plotting library, is contingent upon a GUI environment for graph generation. The performance data, as a result, are saved to the `/performance` directory within the GitHub repository REF(https://github.com/EEMplekei/TimeseriesDB_Benchmarks/tree/main/single_node/performance). Subsequently, every recorded measurement is documented within this designated file.