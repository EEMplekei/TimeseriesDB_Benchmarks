G M

LOOK ONLY ON THE "BETTER" TEXT THAT IS WRITTEN IN A LITTLE MORE FORMAL FASHION


Setting up multi -node
ORIGINAL
To see how well each database scales out we setup a cluster that consists of 3 nodes (virtual machines provided by Okeanos). For every virtual machine, we have instantiated an Ubuntu 22.04.03 LTS instance, utilizing the 5.15.0-91-generic Linux kernel. The virtual environment is configured with an Intel(R) Xeon(R) CPU E5-2650 v3 operating at 2.3GHz, 4GB of RAM, and a 30GB virtual boot drive. The virtual machines are connected to a virtual private network (VPN) that is also configured from Okeanos. In each node we will install TimescaleDB and Influx. We will use the same datasets as in the single node experiment (small - 1Gb, medium - 5Gb and large - 15Gb). 


BETTER
To evaluate the scalability of each database, we established a cluster comprising three nodes (virtual machines provided by Okeanos). For each virtual machine, we instantiated an instance of Ubuntu 22.04.03 LTS, running the 5.15.0-91-generic Linux kernel. The virtual environment is equipped with an Intel(R) Xeon(R) CPU E5-2650 v3 operating at 2.3GHz, 4GB of RAM, and a 30GB virtual boot drive. These virtual machines are connected to a virtual private network (VPN) configured through Okeanos. In order to establish internet connectivity for all three machines, Network Address Translation (NAT) was implemented on Node A, which is equipped with the public IPv4 address in this particular instance. This configuration was essential to enable license key verification for the Influx Enterprise data version. However, an elaboration on this aspect will be provided later in this section, specifically within the part of the multi-node Influx installation. TimescaleDB and Influx will be installed on each node, and we will employ the same datasets used in the single-node experiment (small - 1GB, medium - 5GB, and large - 15GB).

(PNG MULTI)



Timescale multi
ORIGINAL
For the TimescaleDB cluster we set Node A as the access node and the nodes B and C as data nodes. We installed TimescaleDB in all 3 nodes as we did in the single node experiment. After that we modified the configuration files of postgres for all 3 nodes in order to setup the cluster connectivity. After that we modified the configuration for Node A in order to make it work like an access node and the configuration for nodes B and C in order to make them work like data nodes. After that we created the database and the hypertable in Node A and we added the data nodes B and C to the hypertable. After that we inserted the data in the hypertable. We used the same queries as in the single node experiment.


BETTER
For the TimescaleDB cluster, Node A was designated as the access node, while Nodes B and C were assigned as data nodes. We installed TimescaleDB 2.13.1 on all three nodes, mirroring the setup from the single-node experiment. Subsequently, we adjusted the configuration files of PostgreSQL for all three nodes to establish cluster connectivity. Further modifications were made to the configuration of Node A to function as the access node and the configurations of Nodes B and C to operate as data nodes. Following these adjustments, we initiated the creation of the databases Node A, specifying Nodes B and C as the data nodes that would host the data of each database. Subsequently, we populated the hypertables with data using the same queries employed in the single-node experiment.



Influx multi
ORIGINAL 
To setup Influx in cluster mode we were forced to switch to the Enterprise Edition 1.11.3 as it is the only version that supports clustering, Influx Enterprise is a commercial product that is not free but for the purposes of this project we used the 14-day free trial. We installed the Influx Enterprise Meta node installer in Node A and Influx Enterprise Data node installer in Node B and Node C. After that we modified the configuration files of Influx in all 3 nodes in order to include the license key we acquired from Influx Enterprise. After that we add Node A (meta node) to the cluster and we added Node B and Node C (data nodes) to the cluster. After that we added the data nodes B and C. After that we inserted the data in the retention policy. We used the same data and queries as in the single node experiment.


BETTER
To implement Influx in cluster mode, we had to transition to the Enterprise Edition, the sole version supporting clustering. Influx Enterprise 1.11.3 is a commercial product, but for this project, we leveraged the 14-day free trial. The Influx Enterprise Meta node installer was deployed in Node A, while the Influx Enterprise Data node installer was installed in Nodes B and C. Subsequently, we modified the configuration files of Influx on all three nodes to incorporate the license key obtained from Influx Enterprise. Following this, Node A (meta node) and Node B, Node C (data nodes) were added to the cluster, and subsequently inserted data into the retention policy. The same dataset and queries from the single-node experiment were used.

==========================
EDIT P (why talk about queries here)

To implement Influx in cluster mode, we had to transition to the Enterprise Edition, the sole version supporting clustering. Influx Enterprise 1.11.3 is a commercial product, but for this project, we utilized the 14-day free trial. The Influx Enterprise Meta node installer was deployed in Node A, while the Influx Enterprise Data node installer was installed in Nodes B and C. Subsequently, we modified the configuration files of Influx on all three nodes to incorporate the license key obtained from Influx Enterprise. Following this, Node A (meta node) and Node B, Node C (data nodes) were added to the cluster, and subsequently inserted data into the retention policy. The same dataset from the single-node experiment were used.
==========================


More Info in repo

For a detailed step-by-step guide, including the specific commands used in the aforementioned processes, please refer to our GitHub Repository REF(https://github.com/EEMplekei/TimeseriesDB_Benchmarks). There, you will find a comprehensive procedure outlined with commands, providing an in-depth resource for replicating and understanding each phase of the setup for both TimescaleDB and Influx in cluster mode. Feel free to explore the repository for additional insights, documentation, and any updates related to the setup procedures. This resource is designed to facilitate a smooth and transparent replication of the processes described, enhancing your understanding and ensuring accurate implementation.