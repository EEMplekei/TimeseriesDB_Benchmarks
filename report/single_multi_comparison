SINGLE VS MULTI AVERAGE EXECUTION TIME

In the graphical representation depicting the average query time, the transition from single to multi-node deployment in Influx reveals an enhancement in average performance for small and medium datasets, albeit a deterioration in performance for the large dataset. The observed performance improvement can be attributed to the parallel execution across the two nodes. Conversely, the decline in performance for the large dataset may be due to queries where the synchronization overhead across nodes outweighs the benefits of parallelization, a phenomenon exacerbated with larger datasets.

Conversely, Timescale exhibits, on average, an inverse behavior, with performance degradation observed for small and medium datasets and a substantial increase (doubling) for the large dataset. This pattern could potentially be attributed to a distinct approach in query execution and parallelization adopted by Timescale, altering the dynamic between parallelization and synchronization overhead to favor larger datasets. Notably, as further elaborated upon later, certain instances of notably poor Timescale performance exhibit a significantly greater scaling factor when executed on multiple nodes.

SINGLE VS MULTI PER QUERY TYPE

In the presented graph, the disparity per query type is evident for both Influx and Timescale, as discussed previously. Of greater significance is the observation of how these differences evolve with the transition from a single to a multi-node deployment. In the case of Influx, there is an overall performance improvement across most queries, with some experiencing performance gains of up to threefold. Conversely, the two queries that exhibited suboptimal performance in the single-node setup demonstrated an even more pronounced decline in the multi-node configuration. This, coupled with their already elevated execution times among Influx queries, contributed to the performance degradation observed in the large dataset within the average query time execution metric.

Contrastingly, Timescale exhibited a remarkable and unexpected improvement in performance across all queries, with only one exception, where execution times were either halved or even 5.2 times faster (in the case of avg-load). Particularly surprising was the twofold performance gain observed in queries that had previously performed inadequately on Timescale (high-load, last-loc, and low-fuel). These findings support the proposition that the prolonged execution times for these queries result from the necessity for Timescale to traverse the entire dataset. When this operation is distributed across two data nodes (assuming processing occurs at the data nodes rather than the access node, a plausible scenario to avoid extensive data movement across the network), an anticipated acceleration in performance is expected.Consequently, this elucidates the rationale behind the discernibly lower average query time observed on Timescale for the large dataset.

